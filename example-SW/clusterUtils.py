import gensim
import pickle
from sklearn.cluster import KMeans
import numpy as np

"""
Make Clustering Objects
Takes the kmeans object generated by sklearn, the number of clusters, and the
matrix of word vectors
and uses this to generate a list of clusters formated to contain the number
of unique words in the cluster, the total frequency of those words in the
corpus, and a list of all words, with their associate frequencies
"""
def make_clustering_objects(word2vecModel,kmeans,vocab_list,WordByFeatureMat):
    clusters =[]
    for i in range(len(kmeans.cluster_centers_)):
        clusters.append( {'unique_words':0,'total_freq':0,'word_list':[]})
    
    predictions = kmeans.predict(WordByFeatureMat)
    for i in range(len(vocab_list)):
        cluster   = predictions[i]
        word      = vocab_list[i]
        freq      = word2vecModel.wv.vocab[word].count
        clusters[cluster]['unique_words'] += 1
        clusters[cluster]['total_freq'] += freq
        clusters[cluster]['word_list'].append((word,freq))
    return clusters


"""
Make Clustering Objects
Takes the kmeans object generated by sklearn, the number of clusters, and the
matrix of word vectors
and uses this to generate a list of clusters formated to contain the number
of unique words in the cluster, the term-frequency inverse document frequency of those words in the
corpus, and a list of all words, with their associate frequencies
"""
def make_clustering_objects_tfidf(word2vecModel,kmeans,vocab_list,tfidf_list,WordByFeatureMat):
    clusters =[]
    for i in range(len(kmeans.cluster_centers_)):
        clusters.append( {'unique_words':0,'total_freq':0,'word_list':[]})
    
    predictions = kmeans.predict(WordByFeatureMat)
    for i in range(len(vocab_list)):
        cluster   = predictions[i]
        word      = vocab_list[i]
        freq      = word2vecModel.wv.vocab[word].count
        tfidf     = tfidf_list[i]
        clusters[cluster]['unique_words'] += 1
        clusters[cluster]['total_freq'] += freq
        clusters[cluster]['word_list'].append((word,tfidf))
    return clusters

    
"""
Make Clustering Objects
Takes the kmeans object generated by sklearn, the number of clusters, and the
matrix of posts vectors
and uses this to generate a list of clusters formated to contain the number
 of posts in this cluster, the mean score, the median score, and the range
"""
def make_post_clusters(kmeans,PostsByXMat,scores,num_comments_list):
    clusters =[]
    num_clusters=len(kmeans.cluster_centers_)
    for i in range(num_clusters):
        clusters.append( {'total_posts':0,'post_list':[],
                          'center':list(zip(kmeans.cluster_centers_[i].tolist(),range(1,1+num_clusters)))})
    predictions = kmeans.predict(PostsByXMat)
    posts_vecs = PostsByXMat.toarray().tolist()
    for i in range(len(posts_vecs)):
        cluster = predictions[i]
        clusters[cluster]['total_posts'] +=1
        clusters[cluster]['post_list'].append({'score':scores[i], 'num_comments':num_comments_list[i],
                                              'vector':list(zip(posts_vecs[i],range(1,1+num_clusters)))})
    for cluster in clusters:
        cluster['post_list'].sort(key = (lambda x: x['score']))
        total_score=0
        total_comments=0
        min_score    = cluster['post_list'][0]['score']
        max_score    = cluster['post_list'][-1]['score']
        cluster['score_range'] = max_score-min_score
        midpoint=len(cluster['post_list'])//2
        cluster['score_median']  = cluster['post_list'][midpoint]['score']
        cluster['post_list'].sort(key = (lambda x: x['num_comments']))
        min_comments = cluster['post_list'][0]['num_comments']
        max_comments = cluster['post_list'][-1]['num_comments']
        cluster['comments_range'] = max_comments-min_comments
        for post in cluster['post_list']:
            total_score += post['score']
            total_comments += post['num_comments']
        cluster['score_mean']= total_score/cluster['total_posts']
        cluster['comments_mean'] = total_comments/cluster['total_posts']
        cluster['comments_median']  = cluster['post_list'][midpoint]['num_comments']
    return clusters
